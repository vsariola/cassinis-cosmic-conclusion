// Generated with Shader Minifier 1.3.6 (https://github.com/laurentlb/Shader_Minifier/)
#ifndef SHADER_INL_
# define SHADER_INL_
# define VAR_col "y"
# define VAR_u "v"

const char *shader_frag =
 "#version 430\n"
 "out vec3 y;"
 "uniform ivec4 v;"
 "vec2 t(vec3 v,vec3 y)"
 "{"
   "float s=dot(v,y),a=s*s-dot(v,v)+1e4;"
   "return vec2(-s-sqrt(a),a);"
 "}"
 "vec3 n(vec3 v,vec3 y)"
 "{"
   "float s=1-.999*dot(v,y);"
   "return vec3(5,2,1)/1e5/s/s;"
 "}"
 "void main()"
 "{"
   "float s,a,x,i,f,d,r,l;"
   "vec2 m,e,u,c;"
   "vec3 z,g,p,w,C,F,E;"
   "ivec3 D=ivec3(gl_FragCoord);"
   "for(s=1;s<4;s++)"
     "for(a=1;a<5;a++)"
       "{"
         "x=(D.x+D.y*512+v.w)/4/4.8e4;"
         "i=x*a/32+s/3;"
         "f=mod(i,1);"
         "r=x+(D.x&2)*x/50;"
         "l=4*sin(exp2(mod(i-f,3)/6+8.5)*x*a*s);"
         "for(d=3;d<50;r+=d*=1.02)"
           "l+=sin(r*d)/d;"
         "y+=sin(sin(i<9?"
           "x/a/47:"
           "0)*l)*exp2(21-f*13-1/f-s/3-a/3);"
       "}"
   "y=(ivec3(y)>>D.x%2*8)%256/255.;"
   "if(v.w<0)"
     "{"
       "s=v.z/3.6e6;"
       "a=mod(s,2);"
       "x=s-a;"
       "p=vec3(2*D.xy-v.xy,4*v.y);"
       "w=x==0?"
         "(z=vec3(0,-1,33),p.zy+=p.yz*vec2(1,-1)*(-.05+.08*a),vec3(0,90+15*a,-180)):"
         "x==2?"
           "(z=vec3(3,2,-3),p.xy+=p.yx*vec2(.3,-.3),vec3(0,25,-250)*(1+a*a)):"
           "x==4?"
             "(z=vec3(0,1,3),vec3(180,50+a*50,-600)):"
             "(z=vec3(-3,2,6),vec3(0,0,-600)*(1+a*a));"
       "p=normalize(p);"
       "z=normalize(z);"
       "i=-w.y/p.y;"
       "y=n(z,p);"
       "g=w+p*i;"
       "m=t(w,p);"
       "e=t(g,z);"
       "w+=m.x*p;"
       "C=normalize(w);"
       "x=-w.y/z.y;"
       "d=length(g.xz);"
       "r=length((w+x*z).xz);"
       "u+=.25;"
       "c=vec2(w.y*.05,d*.15+1);"
       "for(s=1;s<8;s++)"
         "F+=u.x*(sin(c.x+vec3(0,1,2)/4)+1),E+=u.y*sin(c.y+vec3(2,1,0)/8),u*=.5,u.y*=smoothstep(1.,.6,(1+p.y)*sqrt(abs(dot(normalize(g),p)))*tanh(i*.004)),c=1.99*c+1;"
       "E=abs(E);"
       "l=1-smoothstep(40,19,abs(r-200))*(.5+.4*sin(.3*r)*cos(.05*r))*tanh(100*z.y*z.y);"
       "r=tanh(.005*m.y);"
       "if(m.x>0)"
         "{"
           "y*=1-r;"
           "y+=sqrt(n(z,reflect(p,C)))*pow(1+dot(p,C),8.)+max(dot(z,C),0)*r*F;"
           "if(x>0)"
             "y*=l;"
         "}"
       "y=sqrt(tanh(mix(y,E*(e.x>0?"
         "smoothstep(2e3,0.,e.y)+.03:"
         "1),smoothstep(40,19,abs(d-200))*(m.x<i?"
         "1-r:"
         "1)*3.*E.y)*a*(2-a)));"
     "}"
 "}";

#endif // SHADER_INL_
