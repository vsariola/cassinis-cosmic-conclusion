// Generated with Shader Minifier 1.3.6 (https://github.com/laurentlb/Shader_Minifier/)
#ifndef SHADER_INL_
# define SHADER_INL_
# define VAR_col "y"
# define VAR_u "v"

const char *shader_frag =
 "#version 430\n"
 "out vec3 y;"
 "uniform ivec4 v;"
 "vec2 t(vec3 v,vec3 y)"
 "{"
   "float s=dot(v,y),z=s*s-dot(v,v)+1e4;"
   "return vec2(-s-sqrt(z),z);"
 "}"
 "vec3 n(vec3 v,vec3 y)"
 "{"
   "float s=1.0001-dot(v,y);"
   "return vec3(5,2,1)/5e4/s/s;"
 "}"
 "void main()"
 "{"
   "ivec3 s=ivec3(gl_FragCoord);"
   "float z,d,x,f,i,a,r,m;"
   "for(z=1;z<4;z++)"
     "for(d=1;d<5;d++)"
       "{"
         "x=(s.x+s.y*512+v.w)/4/4.8e4;"
         "f=x*d/32+z/3;"
         "i=mod(f,1);"
         "a=3;"
         "r=x+(s.x&2)*x/50;"
         "for(m=4*sin(exp2(mod(f-i,3)/6+8.5)*x*d*z);a<50;r+=a*=1.02)"
           "m+=sin(r*a)/a;"
         "y+=sin(sin(f<9?"
           "x/d/47:"
           "0)*m)*exp2(21-i*13-1/i-z/3-d/3);"
       "}"
   "y=(ivec3(y)>>s.x%2*8)%256/255.;"
   "if(v.w<0)"
     "{"
       "z=v.z/3.2e6;"
       "d=mod(z,2);"
       "x=z-d;"
       "vec3 e,l=vec3(2*s.xy-v.xy,4*v.y),g=x==0?"
         "(e=vec3(0,-1,33),l.zy+=l.yz*vec2(1,-1)*(-.05+.08*d),vec3(0,90+15*d,-180)):"
         "x==2?"
           "(e=vec3(3,2,-3),l.xy+=l.yx*vec2(.3,-.3),vec3(0,25,-250)*(1+d*d)):"
           "x==4?"
             "(e=vec3(0,1,3),vec3(180,50+d*50,-600)):"
             "(e=vec3(-3,2,6),vec3(0,0,-600)*(1+d*d)),u,w,C,F,H;"
       "l=normalize(l);"
       "e=normalize(e);"
       "f=-g.y/l.y;"
       "y=n(e,l);"
       "u=g+l*f;"
       "vec2 c=t(g,l),E=t(u,e),D,B;"
       "w=g+c.x*l;"
       "C=normalize(w);"
       "x=-w.y/e.y;"
       "a=length(u.xz);"
       "r=length((w+x*e).xz);"
       "D=vec2(.25);"
       "B=vec2(w.y*.05,a*.15+1);"
       "for(z=1;z<8;z++)"
         "F+=D.x*(sin(B.x+vec3(0,1,2)/4)+1),H+=D.y*sin(B.y+vec3(2,1,0)/8),D*=.5,D.y*=smoothstep(1.,.6,(1+l.y)*sqrt(abs(dot(normalize(u.xz),normalize(l.xz))))*tanh(f*.004)),B=1.99*B+1;"
       "H=abs(H);"
       "m=1-smoothstep(40,19,abs(r-200))*(.5+.4*sin(.3*r)*cos(.05*r))*tanh(100*e.y*e.y);"
       "r=tanh(.005*c.y);"
       "if(c.x>0)"
         "{"
           "y*=1-r;"
           "i=1+dot(l,C);"
           "i*=i*i;"
           "y+=sqrt(n(e,reflect(l,C)))*i+max(dot(e,C),0)*r*(F+vec3(.4,.9,2)*i*i);"
           "if(x>0)"
             "y*=m;"
         "}"
       "y=sqrt(tanh(mix(y,H*(E.x>0?"
         "smoothstep(2e3,0.,E.y)+.03:"
         "1),smoothstep(40,19,abs(a-200))*(c.x<f?"
         "1-r:"
         "1)*dot(H,vec3(1)))*d*(2-d)));"
     "}"
 "}";

#endif // SHADER_INL_
