// Generated with Shader Minifier 1.3.6 (https://github.com/laurentlb/Shader_Minifier/)
#ifndef SHADER_INL_
# define SHADER_INL_
# define VAR_col "i"
# define VAR_u "v"

const char *shader_frag =
 "#version 430\n"
 "out vec3 i;"
 "uniform ivec3 v;"
 "void main()"
 "{"
   "float s,y,d,x,m,z,f;"
   "vec2 n,a,l,e;"
   "vec3 p,g,t,r,u,c,C;"
   "ivec3 F=ivec3(gl_FragCoord);"
   "s=v.z/3.6e6;"
   "y=mod(s,2);"
   "t=vec3(2*F.xy-v.xy,4*v.y);"
   "p=vec3(0,-1,33),r=vec3(0,1+y/7,-2),t.zy+=t.yz*vec2(1,-1)*(-.05+.08*y);"
   "if(0<s-2)"
     "p=vec3(3,2,-3),r=vec3(0,.2,-2)*(1+y*y),t.xy+=t.yx*vec2(.3,-.3);"
   "if(0<s-4)"
     "p=vec3(0,1,3),r=vec3(2,.5+y/2,-6);"
   "if(0<s-6)"
     "p=vec3(-3,2,6),r=vec3(0,0,-6)*(1+y*y);"
   "t=normalize(t);"
   "p=normalize(p);"
   "x=-r.y/t.y;"
   "g=r+t*x;"
   "d=dot(g,p);"
   "m=d*d-dot(g,g)+1;"
   "a=vec2(-d-sqrt(m),m);"
   "d=dot(r,t);"
   "m=d*d-dot(r,r)+1;"
   "n=vec2(-d-sqrt(m),m);"
   "r+=n.x*t;"
   "d=-r.y/p.y;"
   "m=length(g.xz);"
   "z=length((r+d*p).xz);"
   "l+=.25;"
   "e=vec2(r.y*5,m*15)+1;"
   "for(s=1;s<8;s++)"
     "c+=l.x*(sin(e.x+vec3(0,1,2)/4)+1),C+=l.y*sin(e.y+vec3(2,1,0)/8),l*=.5,l.y*=smoothstep(1.,.6,(1+t.y)*sqrt(abs(dot(normalize(g),t)))*tanh(x*40.)),e=1.99*e+1;"
   "C=abs(C);"
   "f=1-smoothstep(.4,.2,abs(2-z))*(.5+.4*sin(33*z)*cos(5*z))*step(0,d);"
   "z=tanh(55*n.y);"
   "i=vec3(5,2,1)/pow(300.2-300*dot(p,t),2);"
   "u=vec3(5,2,1)/pow(300.2-300*dot(p,reflect(t,r)),2);"
   "if(0<n.x)"
     "i=mix(i,sqrt(u)*pow(1+dot(t,r),8)+max(dot(p,r),0)*z*c*f,z);"
   "i=sqrt(tanh(mix(i,C*smoothstep(.2,0.,a.y*step(0,a.x)),smoothstep(.4,.2,abs(2-m))*(n.x<x?"
     "1-z:"
     "1)*3*C.y)*y*(2-y)));"
   "for(s=1;s<4;s++)"
     "for(y=1;y<5;y++)"
       "{"
         "d=(F.x+F.y*512+v.z+1)/4/4.8e4+175;"
         "x=min(d*y/32+s/3,9);"
         "z=mod(x,1);"
         "f=4*sin(exp2(mod(x-z,3)/6+8)*d*y*s);"
         "x=d+(F.x&2);"
         "for(m=3;m<50;x+=m*=1.02)"
           "f+=sin(x*m)/m;"
         "p+=sin(sin(d/y/47)*f)*exp2(21-13*z-1/z-s/3-y/3);"
       "}"
   "if(0>v.z)"
     "i=(ivec3(p)>>F.x%2*8)%256/255.;"
 "}";

#endif // SHADER_INL_
