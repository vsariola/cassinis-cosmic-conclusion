// Generated with Shader Minifier 1.3.6 (https://github.com/laurentlb/Shader_Minifier/)
#ifndef SHADER_INL_
# define SHADER_INL_
# define VAR_col "i"
# define VAR_u "v"

const char *shader_frag =
 "#version 430\n"
 "out vec3 i;"
 "uniform ivec3 v;"
 "void main()"
 "{"
   "float y,s,m,a,d,f,z;"
   "vec3 e,n,g;"
   "ivec3 l=ivec3(gl_FragCoord);"
   "y=v.z/3.6e6;"
   "s=mod(y,2);"
   "n=vec3(2*l.xy-v.xy,4*v.y);"
   "e=vec3(0,-1,33),g=vec3(0,1+s/7,-2),n.zy+=n.yz*vec2(1,-1)*(-.05+.08*s);"
   "if(0<y-2)"
     "e=vec3(3,2,-3),g=vec3(0,.2,-2)*(1+s*s),n.xy+=n.yx*vec2(.3,-.3);"
   "if(0<y-4)"
     "e=vec3(0,1,3),g=vec3(2,.5+s/2,-6);"
   "if(0<y-6)"
     "e=vec3(-3,2,6),g=vec3(0,0,-6)*(1+s*s);"
   "n=normalize(n);"
   "e=normalize(e);"
   "y=dot(g,n);"
   "s=-dot(g,g)+y*y+1;"
   "y=-y-sqrt(s);"
   "m=max(tanh(1e3*s/y),0);"
   "s=smoothstep(0.,.01,dot(g+n*y,e))*m;"
   "a=-g.y/n.y;"
   "d=a<y?"
     "1:"
     "1.-m;"
   "e=g+n*a;"
   "y=abs(abs(length(e)-2)-.2)-.18;"
   "m=abs(dot(normalize(e),n))*length(fwidth(e));"
   "i+=mix(s,smoothstep(m,-m,y),smoothstep(m,-m,y-.05)*d);"
   "for(y=1;y<4;y++)"
     "for(s=1;s<5;s++)"
       "{"
         "m=(l.x+l.y*512+v.z+1)/4/4.8e4+175;"
         "a=min(m*s/32+y/3,9);"
         "f=mod(a,1);"
         "z=4*sin(exp2(mod(a-f,3)/6+8)*m*s*y);"
         "a=m+(l.x&2);"
         "for(d=3;d<50;a+=d*=1.02)"
           "z+=sin(a*d)/d;"
         "e+=sin(sin(m/s/47)*z)*exp2(21-13*f-1/f-y/3-s/3);"
       "}"
   "if(0>v.z)"
     "i=(ivec3(e)>>l.x%2*8)%256/255.;"
 "}";

#endif // SHADER_INL_
