// Generated with Shader Minifier 1.3.6 (https://github.com/laurentlb/Shader_Minifier/)
#ifndef SHADER_INL_
# define SHADER_INL_
# define VAR_col "y"
# define VAR_u "v"

const char *shader_frag =
 "#version 430\n"
 "out vec3 y;"
 "uniform ivec4 v;"
 "vec2 t(vec3 v,vec3 y)"
 "{"
   "float s=dot(v,y),z=s*s-dot(v,v)+1e4;"
   "return vec2(-s-sqrt(z),z);"
 "}"
 "vec3 n(vec3 v,vec3 y)"
 "{"
   "float s=1-.999*dot(v,y);"
   "return vec3(5,2,1)/1e5/s/s;"
 "}"
 "void main()"
 "{"
   "float s,z,x,i,f,d,a,r;"
   "vec2 m,e,l,c;"
   "vec3 g,u,p,w,C,F,E;"
   "ivec3 D=ivec3(gl_FragCoord);"
   "for(s=1;s<4;s++)"
     "for(z=1;z<5;z++)"
       "{"
         "x=(D.x+D.y*512+v.w)/4/4.8e4;"
         "i=x*z/32+s/3;"
         "f=mod(i,1);"
         "a=x+(D.x&2)*x/50;"
         "r=4*sin(exp2(mod(i-f,3)/6+8.5)*x*z*s);"
         "for(d=3;d<50;a+=d*=1.02)"
           "r+=sin(a*d)/d;"
         "y+=sin(sin(i<9?"
           "x/z/47:"
           "0)*r)*exp2(21-f*13-1/f-s/3-z/3);"
       "}"
   "y=(ivec3(y)>>D.x%2*8)%256/255.;"
   "if(v.w<0)"
     "{"
       "s=v.z/3.6e6;"
       "z=mod(s,2);"
       "x=s-z;"
       "p=vec3(2*D.xy-v.xy,4*v.y);"
       "w=x==0?"
         "(g=vec3(0,-1,33),p.zy+=p.yz*vec2(1,-1)*(-.05+.08*z),vec3(0,90+15*z,-180)):"
         "x==2?"
           "(g=vec3(3,2,-3),p.xy+=p.yx*vec2(.3,-.3),vec3(0,25,-250)*(1+z*z)):"
           "x==4?"
             "(g=vec3(0,1,3),vec3(180,50+z*50,-600)):"
             "(g=vec3(-3,2,6),vec3(0,0,-600)*(1+z*z));"
       "p=normalize(p);"
       "g=normalize(g);"
       "i=-w.y/p.y;"
       "y=n(g,p);"
       "u=w+p*i;"
       "m=t(w,p);"
       "e=t(u,g);"
       "w+=m.x*p;"
       "C=normalize(w);"
       "x=-w.y/g.y;"
       "d=length(u.xz);"
       "a=length((w+x*g).xz);"
       "l+=.25;"
       "c=vec2(w.y*.05,d*.15+1);"
       "for(s=1;s<8;s++)"
         "F+=l.x*(sin(c.x+vec3(0,1,2)/4)+1),E+=l.y*sin(c.y+vec3(2,1,0)/8),l*=.5,l.y*=smoothstep(1.,.6,(1+p.y)*sqrt(abs(dot(normalize(u.xz),normalize(p.xz))))*tanh(i*.004)),c=1.99*c+1;"
       "E=abs(E);"
       "r=1-smoothstep(40,19,abs(a-200))*(.5+.4*sin(.3*a)*cos(.05*a))*tanh(100*g.y*g.y);"
       "a=tanh(.005*m.y);"
       "if(m.x>0)"
         "{"
           "y*=1-a;"
           "y+=sqrt(n(g,reflect(p,C)))*pow(1+dot(p,C),8.)+max(dot(g,C),0)*a*F;"
           "if(x>0)"
             "y*=r;"
         "}"
       "y=sqrt(tanh(mix(y,E*(e.x>0?"
         "smoothstep(2e3,0.,e.y)+.03:"
         "1),smoothstep(40,19,abs(d-200))*(m.x<i?"
         "1-a:"
         "1)*3.*E.y)*z*(2-z)));"
     "}"
 "}";

#endif // SHADER_INL_
