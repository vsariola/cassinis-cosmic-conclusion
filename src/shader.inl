// Generated with Shader Minifier 1.3.6 (https://github.com/laurentlb/Shader_Minifier/)
#ifndef SHADER_INL_
# define SHADER_INL_
# define VAR_col "y"
# define VAR_u "v"

const char *shader_frag =
 "#version 430\n"
 "out vec3 y;"
 "uniform ivec4 v;"
 "vec2 t(vec3 v,vec3 y)"
 "{"
   "float s=dot(v,y),z=s*s-dot(v,v)+1e4;"
   "return vec2(-s-sqrt(z),z);"
 "}"
 "vec3 n(vec3 v,vec3 y)"
 "{"
   "float s=1.0001-dot(v,y);"
   "return vec3(5,2,1)/5e4/s/s;"
 "}"
 "void main()"
 "{"
   "ivec3 s=ivec3(gl_FragCoord);"
   "for(float z=1;z<4;z++)"
     "for(float x=1;x<5;x++)"
       "{"
         "float m=(s.x+s.y*512+v.w)/4/4.8e4,a=m*x/32+z/3,d=mod(a,1),f=3,i=m+(s.x&2)*m/50,c=4*sin(exp2(mod(a-d,3)/6+8.5)*m*x*z);"
         "for(;f<50;i+=f*=1.02)"
           "c+=sin(i*f)/f;"
         "y+=sin(sin(a<9?"
           "m/x/47:"
           "0)*c)*exp2(21-d*13-1/d-z/3-x/3);"
       "}"
   "y=(ivec3(y)>>s.x%2*8)%256/255.;"
   "if(v.w<0)"
     "{"
       "float m=v.z/8e5,z=mod(m,2),a=m-z;"
       "vec3 f,d=vec3(2*s.xy-v.xy,4*v.y),i=a==0?"
         "(f=vec3(0,-1,33),d.zy+=d.yz*vec2(1,-1)*(-.05+.08*z),vec3(0,90+15*z,-180)):"
         "a==2?"
           "(f=vec3(3,2,-3),d.xy+=d.yx*vec2(.3,-.3),vec3(0,25,-250)*(1+z*z)):"
           "a==4?"
             "(f=vec3(0,1,3),vec3(180,50+z*50,-600)):"
             "(f=vec3(-3,2,6),vec3(0,0,-600)*(1+z*z));"
       "d=normalize(d);"
       "f=normalize(f);"
       "float x=-i.y/d.y;"
       "y=n(f,d);"
       "vec3 c=i+d*x;"
       "vec2 e=t(i,d),g=t(c,f);"
       "vec3 w=i+e.x*d,r=normalize(w),C,u;"
       "float F=-w.y/f.y,l=1+dot(d,r),G=length(c.xz),E=length((w+F*f).xz),D=tanh(.005*e.y),B=1-smoothstep(40.,19.,abs(E-200))*(.5+.4*sin(.3*E)*cos(.05*E))*tanh(100*f.y*f.y);"
       "vec2 A=vec2(.25),H=vec2(w.y*.05,G*.15+1);"
       "for(float I=1;I<8;I++)"
         "C+=A.x*(sin(H.x+vec3(0,1,2)/4)+1),u+=A.y*sin(H.y+vec3(2,1,0)/8),A*=.5,A.y*=smoothstep(1.,.6,(1+d.y)*sqrt(abs(dot(normalize(c.xz),normalize(d.xz))))*tanh(x*.004)),H=1.98*H+1.34;"
       "u=abs(u);"
       "l*=l*l;"
       "if(e.x>0)"
         "{"
           "y*=1-D;"
           "y+=sqrt(n(f,reflect(d,r)))*l+max(dot(f,r),0)*D*(C+vec3(.4,.9,2)*l*l);"
           "if(F>0)"
             "y*=B;"
         "}"
       "y=sqrt(tanh(mix(y,u*(g.x>0?"
         "smoothstep(2e3,0.,g.y)+.03:"
         "1),smoothstep(40,19,abs(G-200))*(e.x<x?"
         "1-D:"
         "1)*dot(u,vec3(1)))*z*(2-z)));"
     "}"
 "}";

#endif // SHADER_INL_
